{"version":3,"sources":["redux/phonebook-actions.js","components/PhonebookForm/PhonebookForm.styles.jsx","components/PhonebookForm/PhonebookForm.jsx","components/ContactListItem/ContactListItem.styles.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/SearchContact/SearchContact.styles.jsx","components/SearchContact/SearchContact.jsx","App.js","redux/phonebook-reducer.js","redux/store.js","index.js"],"names":["actions","addContact","createAction","payload","name","number","id","uuidv4","deleteContact","setFilter","Form","BtnAddContact","Input","PhonebookForm","state","handleSetUserInfo","e","target","value","setState","handleAddContact","preventDefault","props","handleSubmit","reset","this","autocomplete","onSubmit","onChange","type","pattern","title","required","Component","connect","dispatch","contact","contactsActions","ContactItem","DeleteBtn","ContactListItem","onClick","getFiltredContacts","contacts","filter","normalizedFilter","toLowerCase","trim","includes","items","handleDelete","map","SearchTitle","inputChange","App","itemsReducer","createReducer","find","savedContact","alert","action","filterReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"uTAceA,EADC,CAAEC,WAVCC,YAAa,gBAAgB,kBAAuB,CACrEC,QAAS,CACPC,KAF4C,EAAGA,KAG/CC,OAH4C,EAASA,OAIrDC,GAAIC,mBAMsBC,cAHRN,YAAa,mBAGUO,UAF3BP,YAAa,oB,OCTxB,IAAMQ,EAAI,mLAcJC,EAAa,2WAiBbC,EAAK,sK,OC5BZC,E,4MACJC,MAAQ,CACNV,KAAM,GACNC,OAAQ,I,EAGVU,kBAAoB,SAAAC,GAClB,MAAwBA,EAAEC,OAAlBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBf,EAAOc,K,EAG1BE,iBAAmB,SAAAJ,GACjBA,EAAEK,iBACF,EAAKC,MAAMC,aAAa,EAAKT,OAE7B,EAAKU,S,EAGPA,MAAQ,WACN,EAAKL,SAAS,CAAEf,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,MAAyBoB,KAAKX,MAAtBV,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,eAACK,EAAD,CAAMgB,aAAa,MAAMC,SAAUF,KAAKL,iBAAxC,UACE,kCACE,qCACA,cAACR,EAAD,CACEgB,SAAUH,KAAKV,kBACfG,MAAOd,EACPyB,KAAK,OACLzB,KAAK,OACLsB,aAAa,MACbI,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,kCACE,uCACA,cAACpB,EAAD,CACEgB,SAAUH,KAAKV,kBACfG,MAAOb,EACPwB,KAAK,MACLzB,KAAK,SACLsB,aAAa,MACbI,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,cAACrB,EAAD,CAAekB,KAAK,SAApB,gC,GApDoBI,aA8DbC,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCZ,aAAc,SAAAa,GAAO,OAAID,EAASE,EAAgBpC,WAAWmC,QAGhDF,CAAkCrB,GCjE1C,IAAMyB,EAAW,oJASXC,EAAS,qGCRP,SAASC,EAAT,GAA2D,IAAhCpC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,OAAQG,EAAiB,EAAjBA,cACtD,OACE,eAAC8B,EAAD,WACGlC,EADH,KACWC,EACT,cAACkC,EAAD,CAAWV,KAAK,SAASY,QAASjC,EAAlC,uBCFN,IAwBMkC,EAAqB,SAACC,EAAUC,GACpC,IAAMC,EAAmBD,EAAOE,cAAcC,OAC9C,OAAOJ,EAASC,QAAO,qBAAGxC,KACnB0C,cAAcE,SAASH,OAYjBX,eARS,SAAC,GAAD,QAAGS,SAAYM,EAAf,EAAeA,MAAOL,EAAtB,EAAsBA,OAAtB,MAAsC,CAC5DD,SAAUD,EAAmBO,EAAOL,OAGX,SAAAT,GAAQ,MAAK,CACtCe,aAAc,SAAA5C,GAAE,OAAI6B,EAASE,EAAgB7B,cAAcF,QAG9C4B,EAvCK,SAAC,GAAgC,IAA9BS,EAA6B,EAA7BA,SAAUO,EAAmB,EAAnBA,aAC/B,OACE,6BACGP,EAASQ,KAAI,gBAAG7C,EAAH,EAAGA,GAAIF,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,cAACmC,EAAD,CAEEpC,KAAMA,EACNC,OAAQA,EACRG,cAAe,kBAAM0C,EAAa5C,KAH7BA,WCRR,I,EAAM8C,EAAW,uGCwBTlB,eARS,SAAApB,GAAK,MAAK,CAChCI,MAAOJ,EAAM6B,SAASC,WAGG,SAAAT,GAAQ,MAAK,CACtCkB,YAAa,SAAArC,GAAC,OAAImB,EAASnC,EAAQS,UAAUO,EAAEC,OAAOC,YAGzCgB,EArBO,SAAC,GAA4B,IAA1BhB,EAAyB,EAAzBA,MAAOmC,EAAkB,EAAlBA,YAC9B,OACE,kCACE,cAACD,EAAD,oCACA,uBAAOvB,KAAK,OAAOX,MAAOA,EAAOU,SAAUyB,UCQlCC,EAbH,WACV,OACE,gCACE,2CACA,cAAC,EAAD,IAEA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,wDCRAC,EAAeC,YAAc,IAAD,mBAC/BxD,EAAQC,YAAa,SAACa,EAAD,OAAUX,EAAV,EAAUA,QAAV,OACpBW,EAAM2C,MAAK,SAAAC,GAAY,OAAIA,EAAatD,OAASD,EAAQC,SACpDuD,MAAM,GAAD,OAAIxD,EAAQC,KAAZ,4BAAL,YAAqDU,IAD1D,sBAEQA,GAFR,CAEeX,OAJe,cAK/BH,EAAQQ,eAAgB,SAACM,EAAO8C,GAAR,OACvB9C,EAAM8B,QAAO,qBAAGtC,KAAgBsD,EAAOzD,cANT,IAS5B0D,EAAgBL,YAAc,GAAD,eAChCxD,EAAQS,WAAY,SAACqD,EAAD,YAAM3D,YAGd4D,cAAgB,CAC7Bd,MAAOM,EACPX,OAAQiB,ICJJG,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGRC,EAAQC,YAAe,CAC3BC,QAAS,CACP3B,SAAU4B,YAAeP,EAAuBQ,IAElDC,WAAY,SAAAC,GAAoB,OAC9BA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAE3DC,OAAOC,MACZC,UAAUC,IAMG,GAAElB,QAAOmB,UAHNC,YAAapB,IC1B/BqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUvB,MAAOA,EAAMA,MAAvB,SACE,cAAC,IAAD,CAAawB,QAAS,KAAML,UAAWnB,EAAMmB,UAA7C,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,W","file":"static/js/main.12480922.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    name,\n    number,\n    id: uuidv4(),\n  },\n}));\nconst deleteContact = createAction('contacts/delete');\nconst setFilter = createAction('contacts/filter');\n\nconst actions = { addContact, deleteContact, setFilter };\nexport default actions;\n","import styled from '@emotion/styled/macro';\n\nexport const Form = styled.form`\n  width: 350px;\n  border: 2px solid black;\n  padding: 30px 15px;\n\n  & label {\n    font-weight: 500;\n  }\n  & p {\n    margin: 0;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const BtnAddContact = styled.button`\n  display: block;\n  border-radius: 8px;\n  background-color: #fff;\n  color: black;\n  font-weight: 500;\n  padding: 5px 10px;\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n    0px 2px 1px rgb(0 0 0 / 20%);\n  border-color: transparent;\n  border: 1px solid grey;\n  cursor: pointer;\n  &:hover {\n    background-color: #6ea2de;\n  }\n`;\n\nexport const Input = styled.input`\n  margin-bottom: 30px;\n  &:focus {\n    border: 2px solid #6ea2de;\n    box-shadow: 0px 0px 10px #6ea2de;\n    outline: none;\n  }\n`;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/phonebook-actions';\nimport { Form, BtnAddContact, Input } from './PhonebookForm.styles';\n\nclass PhonebookForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleSetUserInfo = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleAddContact = e => {\n    e.preventDefault();\n    this.props.handleSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <Form autocomplete=\"off\" onSubmit={this.handleAddContact}>\n        <label>\n          <p>Name</p>\n          <Input\n            onChange={this.handleSetUserInfo}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            autocomplete=\"off\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          <p>Number</p>\n          <Input\n            onChange={this.handleSetUserInfo}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            autocomplete=\"off\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <BtnAddContact type=\"submit\">Add contact</BtnAddContact>\n      </Form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  handleSubmit: contact => dispatch(contactsActions.addContact(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(PhonebookForm);\n","import styled from '@emotion/styled/macro';\n\nexport const ContactItem = styled.li`\n  width: 400px;\n  font-size: 20px;\n  font-weight: 500;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  margin-left: 30px;\n  margin-right: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem, DeleteBtn } from './ContactListItem.styles';\n\nexport default function ContactListItem({ name, number, deleteContact }) {\n  return (\n    <ContactItem>\n      {name}: {number}\n      <DeleteBtn type=\"button\" onClick={deleteContact}>\n        Delete\n      </DeleteBtn>\n    </ContactItem>\n  );\n}\n\nContactListItem.propTypes = {\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/phonebook-actions';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\n\nconst ContactList = ({ contacts, handleDelete }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          deleteContact={() => handleDelete(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  handleDelete: PropTypes.func,\n};\n\nconst getFiltredContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase().trim();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getFiltredContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleDelete: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import styled from '@emotion/styled/macro';\n\nexport const SearchTitle = styled.p`\n  font-weight: 500;\n  font-size: 18px;\n  margin: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/phonebook-actions';\nimport { SearchTitle } from './SearchContact.styles';\n\nconst SearchContact = ({ value, inputChange }) => {\n  return (\n    <label>\n      <SearchTitle>Find contacts by name</SearchTitle>\n      <input type=\"text\" value={value} onChange={inputChange} />\n    </label>\n  );\n};\nSearchContact.propTypes = {\n  value: PropTypes.string,\n  inputChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  inputChange: e => dispatch(actions.setFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchContact);\n","import PhonebookForm from 'components/PhonebookForm/PhonebookForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport SearchContact from 'components/SearchContact/SearchContact';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <PhonebookForm />\n\n      <h2>Contacts</h2>\n      <SearchContact />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './phonebook-actions';\n\nconst itemsReducer = createReducer([], {\n  [actions.addContact]: (state, { payload }) =>\n    state.find(savedContact => savedContact.name === payload.name)\n      ? (alert(`${payload.name} is already in contacts`), [...state])\n      : [...state, payload],\n  [actions.deleteContact]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\n\nconst filterReducer = createReducer('', {\n  [actions.setFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './phonebook-reducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}